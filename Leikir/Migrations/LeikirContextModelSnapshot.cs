// <auto-generated />
using System;
using Leikir.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Leikir.Migrations
{
    [DbContext(typeof(LeikirContext))]
    partial class LeikirContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("Leikir.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Orðla er skemmtilegur og krefjandi orðaleikur þar sem markmiðið er að giska á fimm stafa orð í 6 eða færri tilraunum. Eftir hverja tilraun fær leikmaður vísbendingar. Grænn litur þýðir að stafurinn er réttur og á réttum stað. Gulur litur þýðir að stafurinn er í orðinu en á röngum stað. Grár litur þýðir að stafurinn er ekki í orðinu. Leikmaðurinn vinnu leikinn ef hann gískar á rétt orð í 6 eða færri tilraunum. Ef leikmaður nær hinsvegar ekki að gíska á orðið í 6 tilraunum, þá tapar hann leiknum.",
                            Name = "Orðla"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Hengiman er leikur sem við ættum flest að kannast við. Markmiðið er að gíska á leyniorðið áður en 'hengingin er fullgerðÍ hverri umferð gískar leikmaður á einn staf. Ef stafurinn er í leyniorðinu þá birtist hann á réttum stað/stöðum.Ef stafurinn er ekki í orðinu þá bætist við einn hluti af hengingunni.Leikmaðurinn tapar leiknum ef hann gerir of margar rangar tilraunir og hengingin klárast.Leikmaður vinnur leikinn ef hann giskar á leyniorðið áður en hengingunni er lokið.",
                            Name = "Hengiman"
                        });
                });

            modelBuilder.Entity("Leikir.Models.Score", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AchivedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GuessedWord")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NumberOfAttempts")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TimeInSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserScore")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("Leikir.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalGames")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalLosses")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalScore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalWins")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Leikir.Models.Score", b =>
                {
                    b.HasOne("Leikir.Models.Game", "Game")
                        .WithMany("Scores")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leikir.Models.User", "User")
                        .WithMany("Scores")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Leikir.Models.Game", b =>
                {
                    b.Navigation("Scores");
                });

            modelBuilder.Entity("Leikir.Models.User", b =>
                {
                    b.Navigation("Scores");
                });
#pragma warning restore 612, 618
        }
    }
}
